{"version":3,"names":[],"mappings":"","sources":["testCases.js"],"sourcesContent":["\"use strict\";\r\nlet assert = require(\"assert\");\r\nlet lib = require(\"../../\");\r\nlet BuildSystem = lib.BuildSystem;\r\nlet _ = require(\"lodash\");\r\nlet path = require(\"path\");\r\nlet Bluebird = require(\"bluebird\");\r\nlet async = Bluebird.coroutine;\r\nlet fs = Bluebird.promisifyAll(require(\"fs-extra\"));\r\n\r\nlet testCases = {\r\n    buildPrototypeWithDirectoryOption: async(function*(options) {\r\n        options = _.extend({\r\n            directory: path.resolve(path.join(__dirname, \"./prototype\"))\r\n        }, options);\r\n        let buildSystem = new BuildSystem(options);\r\n        yield buildSystem.rebuild();\r\n        assert.ok((yield fs.statAsync(path.join(__dirname, \"prototype/build/Release/addon.node\"))).isFile());\r\n    }),\r\n    buildPrototype2WithCWD: async(function*(options) {\r\n        let cwd = process.cwd();\r\n        process.chdir(path.resolve(path.join(__dirname, \"./prototype2\")));\r\n        let buildSystem = new BuildSystem(options);\r\n        try {\r\n            yield buildSystem.rebuild();\r\n            assert.ok((yield fs.statAsync(path.join(__dirname, \"prototype2/build/Release/addon2.node\"))).isFile());\r\n        }\r\n        finally {\r\n            process.chdir(cwd);\r\n        }\r\n    }),\r\n    shouldConfigurePreC11Properly: async(function*(options) {\r\n        options = _.extend({\r\n            directory: path.resolve(path.join(__dirname, \"./prototype\")),\r\n            std: \"c++98\"\r\n        }, options);\r\n        let buildSystem = new BuildSystem(options);\r\n        if (!/visual studio/i.test(buildSystem.toolset.generator)) {\r\n            let command = yield buildSystem.getConfigureCommand();\r\n            assert.equal(command.indexOf(\"-std=c++11\"), -1, \"c++11 still forced\");\r\n        }\r\n    }),\r\n    configureWithCustomOptions: async(function*(options) {\r\n        options = _.extend({\r\n            directory: path.resolve(path.join(__dirname, \"./prototype\")),\r\n            cMakeOptions: {\r\n              foo: \"bar\"\r\n            }\r\n        }, options);\r\n        let buildSystem = new BuildSystem(options);\r\n\r\n        let command = yield buildSystem.getConfigureCommand();\r\n        assert.notEqual(command.indexOf(\"-DFOO=\\\"bar\\\"\"), -1, \"custom options added\");\r\n    })\r\n};\r\n\r\nmodule.exports = testCases;\r\n"],"file":"testCases.js","sourceRoot":"/source/"}