{"version":3,"names":[],"mappings":"","sources":["buildSystem.js"],"sourcesContent":["\"use strict\";\r\n/* global describe,it,before */\r\n\r\nlet assert = require(\"assert\");\r\nlet lib = require(\"../../\");\r\nlet CMake = lib.CMake;\r\nlet BuildSystem = lib.BuildSystem;\r\nlet _ = require(\"lodash\");\r\nlet path = require(\"path\");\r\nlet Bluebird = require(\"bluebird\");\r\nlet async = Bluebird.coroutine;\r\nlet log = require(\"npmlog\");\r\nlet testRunner = require(\"./testRunner\");\r\nlet testCases = require(\"./testCases\");\r\n\r\ndescribe(\"BuildSystem\", function () {\r\n    this.timeout(300000);\r\n\r\n    before(function() {\r\n        if (process.env.UT_LOG_LEVEL) {\r\n            log.level = process.env.UT_LOG_LEVEL;\r\n            log.resume();\r\n        }\r\n        lib.locateNAN.__projectRoot = path.resolve(path.join(__dirname, \"../../\"));\r\n    });\r\n\r\n    describe(\"Build with various options\", function() {\r\n        testRunner.runCase(testCases.buildPrototypeWithDirectoryOption);\r\n    });\r\n\r\n    it(\"should provide list of generators\", function (done) {\r\n        async(function*() {\r\n            let gens = yield CMake.getGenerators();\r\n            assert(_.isArray(gens));\r\n            assert(gens.length > 0);\r\n            assert.equal(gens.filter(function (g) { return g.length; }).length, gens.length);\r\n        })().nodeify(done);\r\n    });\r\n\r\n    it(\"should rebuild prototype if cwd is the source directory\", function (done) {\r\n        testCases.buildPrototype2WithCWD().nodeify(done);\r\n    });\r\n\r\n    it(\"should run with old GNU compilers\", function (done) {\r\n        testCases.shouldConfigurePreC11Properly().nodeify(done);\r\n    });\r\n\r\n    it(\"should configure with custom option\", function (done) {\r\n        testCases.configureWithCustomOptions().nodeify(done);\r\n    });\r\n});\r\n"],"file":"buildSystem.js","sourceRoot":"/source/"}