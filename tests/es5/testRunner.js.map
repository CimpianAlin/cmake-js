{"version":3,"names":[],"mappings":"","sources":["testRunner.js"],"sourcesContent":["\"use strict\";\r\n/* global it */\r\nlet lib = require(\"../../\");\r\nlet environment = lib.environment;\r\nlet Bluebird = require(\"bluebird\");\r\nlet async = Bluebird.coroutine;\r\nlet _ = require(\"lodash\");\r\nlet log = require(\"npmlog\");\r\nlet util = require(\"util\");\r\n\r\nfunction* generateRuntimeOptions() {\r\n    function* generateForNode(arch) {\r\n        // Old:\r\n        yield {\r\n            runtime: \"node\",\r\n            runtimeVersion: \"0.10.36\",\r\n            arch: arch\r\n        };\r\n\r\n        // LTS:\r\n        yield {\r\n            runtime: \"node\",\r\n            runtimeVersion: \"4.4.2\",\r\n            arch: arch\r\n        };\r\n\r\n        // Current:\r\n        if (environment.runtimeVersion !== \"5.10.0\") {\r\n            yield {\r\n                runtime: \"node\",\r\n                runtimeVersion: \"5.10.0\",\r\n                arch: arch\r\n            };\r\n        }\r\n    }\r\n\r\n    function* generateForIojs(arch) {\r\n        // Latest:\r\n        yield {\r\n            runtime: \"iojs\",\r\n            runtimeVersion: \"3.3.1\",\r\n            arch: arch\r\n        };\r\n    }\r\n\r\n    function* generateForNWJS(arch) {\r\n        yield {\r\n            runtime: \"nw\",\r\n            runtimeVersion: \"0.12.3\",\r\n            arch: arch\r\n        };\r\n\r\n        // Latest:\r\n        yield {\r\n            runtime: \"nw\",\r\n            runtimeVersion: \"0.13.2\",\r\n            arch: arch\r\n        };\r\n    }\r\n\r\n    function* generateForElectron(arch) {\r\n        // Latest:\r\n        yield {\r\n            runtime: \"electron\",\r\n            runtimeVersion: \"0.37.3\",\r\n            arch: arch\r\n        };\r\n    }\r\n\r\n    function* generateForArch(arch) {\r\n        yield* generateForNode(arch);\r\n        yield* generateForIojs(arch);\r\n        yield* generateForNWJS(arch);\r\n        yield* generateForElectron(arch);\r\n    }\r\n\r\n    if (environment.isWin) {\r\n        yield* generateForArch(\"x64\");\r\n        yield* generateForArch(\"ia32\");\r\n    }\r\n    else {\r\n        yield* generateForArch();\r\n    }\r\n\r\n    // Actual:\r\n    yield {};\r\n}\r\n\r\nfunction* generateOptions() {\r\n    for (let runtimeOptions of generateRuntimeOptions()) {\r\n        if (environment.isWin) {\r\n            // V C++:\r\n            yield runtimeOptions;\r\n        }\r\n        else {\r\n            // Clang, Make\r\n            yield _.extend({}, runtimeOptions, {preferClang: true, referMake: true});\r\n\r\n            // Clang, Ninja\r\n            yield _.extend({}, runtimeOptions, {preferClang: true});\r\n\r\n            // g++, Make\r\n            yield _.extend({}, runtimeOptions, {preferGnu: true, referMake: true});\r\n\r\n            // g++, Ninja\r\n            yield _.extend({}, runtimeOptions, {preferGnu: true});\r\n\r\n            // Default:\r\n            yield runtimeOptions;\r\n        }\r\n    }\r\n}\r\n\r\nlet testRunner = {\r\n    runCase: function (testCase, options) {\r\n        for (let testOptions of generateOptions()) {\r\n            let currentOptions = _.extend({}, testOptions, options || {});\r\n            it(\"should build with: \" + util.inspect(currentOptions), function (done) {\r\n                async(function*() {\r\n                    log.info(\"TEST\", \"Running case for options of: \" + util.inspect(currentOptions));\r\n                    yield testCase(currentOptions);\r\n                })().nodeify(done);\r\n            });\r\n        }\r\n    }\r\n};\r\n\r\nmodule.exports = testRunner;"],"file":"testRunner.js","sourceRoot":"/source/"}