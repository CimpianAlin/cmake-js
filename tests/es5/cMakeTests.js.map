{"version":3,"names":[],"mappings":"","sources":["cMakeTests.js"],"sourcesContent":["\"use strict\";\n/* global describe,it */\n\nlet assert = require(\"assert\");\nlet CMake = require(\"../../\").CMake;\nlet _ = require(\"lodash\");\nlet path = require(\"path\");\nlet Bluebird = require(\"bluebird\");\nlet async = Bluebird.coroutine;\n\ndescribe(\"CMake\", function () {\n    it(\"should provide list of generators\", function (done) {\n        async(function*() {\n            let gens = yield CMake.getGenerators();\n            assert(_.isArray(gens));\n            assert(gens.length > 0);\n            assert.equal(gens.filter(function (g) { return g.length; }).length, gens.length);\n        })().nodeify(done);\n    });\n\n    it(\"should rebuild prototype with explicit directory option specified\", function (done) {\n        this.timeout(30000);\n        async(function*() {\n            let cmake = new CMake({\n                directory: path.resolve(path.join(__dirname, \"./prototype\"))\n            });\n            yield cmake.rebuild();\n            let addon = require(\"./prototype/build/Release/addon.node\");\n            assert.equal(addon.add(3, 5), 3 + 5);\n        })().nodeify(done);\n    });\n\n    it(\"should rebuild prototype if cwd is the source directory\", function (done) {\n        this.timeout(30000);\n        async(function*() {\n            let cwd = process.cwd();\n            process.chdir(path.resolve(path.join(__dirname, \"./prototype2\")));\n            let cmake = new CMake();\n            try {\n                yield cmake.rebuild();\n                process.chdir(cwd);\n                let addon = require(\"./prototype2/build/Release/addon2.node\");\n                assert.equal(addon.mul(5, 6), 5 * 6);\n            }\n            finally {\n                process.chdir(cwd);\n            }\n        })().nodeify(done);\n    });\n\n    it(\"should run with old compilers pre c++11\", function (done) {\n        this.timeout(30000);\n        async(function*() {\n            let cwd = process.cwd();\n            process.chdir(path.resolve(path.join(__dirname, \"./prototype2\")));\n            let cmake = new CMake({forceNoC11:true});\n            let command = yield cmake.getConfigureCommand();\n            assert.equal(command.indexOf(\"-std=c++11\"), -1, \"c++11 still forced\");\n        })().nodeify(done);\n    });\n});"],"file":"cMakeTests.js","sourceRoot":"/source/"}