{"version":3,"names":[],"mappings":"","sources":["cMakeTests.js"],"sourcesContent":["\"use strict\";\n/* global describe,it */\n\nvar assert = require(\"assert\");\nvar CMake = require(\"../../\").CMake;\nvar _ = require(\"lodash\");\nvar path = require(\"path\");\n\ndescribe(\"CMake\", function () {\n    it(\"should provide list of generators\", function (done) {\n        CMake.getGenerators()\n            .then(function (gens) {\n                assert(_.isArray(gens));\n                assert(gens.length > 0);\n                assert.equal(gens.filter(function (g) { return g.length; }).length, gens.length);\n            })\n            .nodeify(done);\n    });\n\n    it(\"should rebuild prototype with explicit directory option specified\", function (done) {\n        this.timeout(30000);\n        var cmake = new CMake({\n            directory: path.resolve(path.join(__dirname, \"./prototype\"))\n        });\n        cmake.rebuild()\n            .then(function () {\n                var addon = require(\"./prototype/build/Release/addon.node\");\n                assert.equal(addon.add(3, 5), 3 + 5);\n            })\n            .nodeify(done);\n    });\n\n    it(\"should rebuild prototype if cwd is the source directory\", function (done) {\n        this.timeout(30000);\n        var cwd = process.cwd();\n        process.chdir(path.resolve(path.join(__dirname, \"./prototype2\")));\n        var cmake = new CMake();\n        cmake.rebuild()\n            .then(function () {\n                process.chdir(cwd);\n                var addon = require(\"./prototype2/build/Release/addon2.node\");\n                assert.equal(addon.mul(5, 6), 5 * 6);\n            })\n            .finally(function() {\n                process.chdir(cwd);\n            })\n            .nodeify(done);\n    });\n\n    it(\"should run with old compilers pre c++11\", function (done) {\n        this.timeout(30000);\n        var cwd = process.cwd();\n        process.chdir(path.resolve(path.join(__dirname, \"./prototype2\")));\n        var cmake = new CMake({forceNoC11:true});\n        cmake.getConfigureCommand()\n            .then(function(command) {\n                assert.equal(command.indexOf(\"-std=c++11\"), -1, \"c++11 still forced\");\n            })\n            .nodeify(done);\n    });\n});"],"file":"cMakeTests.js","sourceRoot":"/source/"}